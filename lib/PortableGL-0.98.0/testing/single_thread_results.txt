on laptop
robert@pop-os:~/programming/C/portablegl_public/testing$ ./perf_tests
points_perf: 483.325 FPS
freeing buffer 1
pointsize_perf: 662.581 FPS
freeing buffer 1
lines_perf: 212.540 FPS
freeing buffer 1
triangles_perf: 24.712 FPS
freeing buffer 1
tri_interp_perf: 27.377 FPS
freeing buffer 1

laptop 9/18/23:
points_perf: 506.201 FPS
freeing buffer 1
pointsize_perf: 690.012 FPS
freeing buffer 1
lines_perf: 208.485 FPS
freeing buffer 1
triangles_perf: 20.596 FPS
freeing buffer 1
tri_interp_perf: 25.329 FPS
freeing buffer 1

real	0m49.920s
user	0m46.374s
sys	0m0.188s




old desktop (i7-2600 @ 3.8 GHz, 1067 MHz RAM)
~/programming/C/PortableGL/testing $ time ./perf_tests 
points_perf: 404.326 FPS
freeing buffer 1
pointsize_perf: 544.588 FPS
freeing buffer 1
lines_perf: 182.299 FPS
freeing buffer 1
triangles_perf: 15.177 FPS
freeing buffer 1
tri_interp_perf: 19.136 FPS
freeing buffer 1



on laptop
Using OpenMP in draw_triangle_fill()
points_perf: 500.313 FPS
freeing buffer 1
pointsize_perf: 671.254 FPS
freeing buffer 1
lines_perf: 221.828 FPS
freeing buffer 1
triangles_perf: 34.722 FPS
freeing buffer 1
tri_interp_perf: 44.215 FPS
freeing buffer 1

You can see the last two tests are
40% faster
60% faster
which seems decent except when you realize it's probably running
4 threads and it can't even manage 2x speedup and this is under
ideal conditions, a small number of large triangles.
Usually there are a much larger number of tiny triangles

